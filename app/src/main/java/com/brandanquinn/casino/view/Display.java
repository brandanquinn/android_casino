package com.brandanquinn.casino.view;

import android.app.Activity;
import android.content.Context;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.GridLayout;
import android.widget.GridView;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.brandanquinn.casino.casino.AppContextProvider;
import com.brandanquinn.casino.casino.R;
import com.brandanquinn.casino.model.Card;
import com.brandanquinn.casino.model.Player;
import com.brandanquinn.casino.model.Table;

import org.w3c.dom.Text;

import java.lang.reflect.Array;
import java.util.ArrayList;

public class Display {
    public Display(Context context) {
        this.currentButtons = new ArrayList<>();
        this.appContext = context;

    }

    public ArrayList<ImageButton> getCurrentButtons() {
        return this.currentButtons;
    }

    /*
        Function Name: updateView
        Purpose: Dynamically update the view based on the model.
        Parameters:
        Return Value:
        Local Variables:
        Algorithm:
        Assistance Received:
         */
    public void updateView(ArrayList<Player> gamePlayers, Table gameTable) {

        displayCards(gamePlayers, gameTable);
    }

    /*
    Function Name: displayCards
    Purpose: Create ImageButtons for each card and display them on the screen.
    Parameters:
        ArrayList<Player> gamePlayers, List of game players
        Table gameTable, Game table object
    Return Value: None
    Local Variables:
    Algorithm:
    Assistance Received: None
     */
    private void displayCards(ArrayList<Player> gamePlayers, Table gameTable) {
        // For each card in human hand - create an image button with proper card image
        // Assign button to a column in the respective players grid
        ArrayList<Card> humanHand = gamePlayers.get(0).getHand();
        ArrayList<Card> computerHand = gamePlayers.get(1).getHand();
        ArrayList<Card> tableCards = gameTable.getTableCards();

        // Gets the view of the game screen for manipulation
//        View appView = View.inflate(appContext, R.layout.activity_game_screen, null);

        LinearLayout humanGrid = ((Activity)appContext).findViewById(R.id.humanHand);
        LinearLayout computerGrid = ((Activity)appContext).findViewById(R.id.computerHand);
        LinearLayout tableGrid = ((Activity)appContext).findViewById(R.id.tableGrid);


        for (int i = 0; i < humanHand.size(); i++) {
            humanGrid.addView(createButton(humanHand.get(i), "humanHand", humanHand.size()));
        }

        for (int i = 0; i < computerHand.size(); i++) {
            computerGrid.addView(createButton(computerHand.get(i), "computerHand", computerHand.size()));
        }

        for (int i = 0; i < tableCards.size(); i++) {
            tableGrid.addView(createButton(tableCards.get(i), "tableCards", tableCards.size()));
        }


    }

    /*
    Function Name: createButton
    Purpose: Create proper ImageButtons for displayCards() to add to grid
    Parameters:
        Card gameCard, reference card for ImageButton
    Return Value: A dynamically created and designed ImageButton
    Local Variables:
        ImageButton cartBtn, Dynamically created button for card provided.
        String cardImageResource, String generated by Card class that maps to the proper image file for that card
        int imageID, Resid created for each cardImageResource to be used for ImageButton setting
    Algorithm:
        1. Initialize ImageButton cardBtn
        2. Get image file name from gameCard member function
        3. Create custom resid using image file name and assign to imageID var
        4. Set cardBtn image, scale, and sizing.
        5. Add cardBtn to currentButtons array
        6. Return cardBtn
    Assistance Received: None
     */
    private ImageButton createButton(Card gameCard, String layoutId, int numCards) {
        // Programmatically create and return an ImageButton based on card passed.
        // Whenever ImageButton is created, add it to currentButtons list

        // Initializing ImageButton and basic resources
        ImageButton cardBtn = new ImageButton(appContext);
        String cardImageResource = gameCard.getImageResourceName();
        int imageID = appContext.getResources().getIdentifier(cardImageResource, "drawable", appContext.getPackageName());

        // Setting ImageButton to proper card image
        cardBtn.setImageResource(imageID);
        cardBtn.setScaleType(ImageView.ScaleType.CENTER_INSIDE);


        TextView debug = ((Activity)appContext).findViewById(R.id.debugBox);

        // Max width of table is 785 dp
        if (layoutId == "tableCards" && numCards > 4) {
            int width = 1268 / numCards;
            cardBtn.setLayoutParams(new LinearLayout.LayoutParams(width, 180));
        } else {
            cardBtn.setLayoutParams(new LinearLayout.LayoutParams(150, 180));
        }



        this.currentButtons.add(cardBtn);

        return cardBtn;
    }

    private ArrayList<ImageButton> currentButtons;
    private Context appContext;
}
